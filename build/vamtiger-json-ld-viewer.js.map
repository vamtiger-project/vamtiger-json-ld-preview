{"version":3,"file":"vamtiger-json-ld-viewer.js","sources":["../source/types.ts","../source/css/document-index.ts","../source/html/index.ts","../source/get-template.ts","../source/config.ts","../source/get-table-article.ts","../source/view-json-ld.ts","../source/element.ts","../source/vamtiger-json-ld-viewer.ts"],"sourcesContent":["import { IAnyObject } from 'vamtiger-browser-method/build/types';\nimport VamtigerJsonLdPreview from './element';\n\nexport enum StringConstant {\n    nothing = ''\n}\n\nexport enum Selector {\n    style = 'style',\n    cards = '[data-cards]',\n    tables = '[data-tables]',\n    tableArticle = '[slot=\"vamtiger-json-ld-viewer-tables\"]',\n    heading = '[data-heading]',\n    subheading = '[data-subheading]',\n    table = '[data-table]'\n}\n\nexport enum ObservedAttributes {\n    'data-json-ld' = 'data-json-ld'\n}\n\nexport enum SlotName {\n    cards = 'vamtiger-json-ld-viewer-cards',\n    tables = 'vamtiger-json-ld-viewer-tables'\n}\n\nexport enum Fonts {\n    openSans = 'https://fonts.googleapis.com/css?family=Open+Sans'\n}\n\nexport interface IGetTemplate {\n    selector: Selector;\n    attributes?: IAttributes;\n    properties?: IProperties;\n}\n\nexport interface IAttributes {\n    id?: string;\n    for?: string;\n    name?: string;\n}\n\nexport interface IGetTableArticle {\n    jsonLd: IAnyObject;\n}\n\nexport interface IProperties {\n    innerHTML?: string;\n}\n\nexport interface IViewJsonLd {\n    element: VamtigerJsonLdPreview;\n    name: ObservedAttribute;\n    oldValue: string;\n    newValue: string;\n}\n\nexport type AttributesKey = keyof IAttributes;\n\nexport type ObservedAttribute = keyof typeof ObservedAttributes;\n\nexport type FontKey = keyof typeof Fonts;\n\nexport type GetTemplate<P extends IGetTemplate> =\n    P['selector'] extends Selector.style ? HTMLStyleElement :\n    P['selector'] extends Selector.cards\n        | Selector.tables\n        | Selector.tableArticle\n        ? HTMLElement :\n    null;","export default `vamtiger-json-ld-viewer article,vamtiger-json-ld-viewer div,vamtiger-json-ld-viewer h1,vamtiger-json-ld-viewer h2,vamtiger-json-ld-viewer h3,vamtiger-json-ld-viewer heading,vamtiger-json-ld-viewer p,vamtiger-json-ld-viewer section{margin:0;padding:0}vamtiger-json-ld-viewer>*{font-family:Open Sans,sans-serif}vamtiger-json-ld-viewer [data-heading],vamtiger-json-ld-viewer [data-subheading]{font-weight:700}vamtiger-json-ld-viewer [data-heading]{font-size:1em}vamtiger-json-ld-viewer [data-subheading]{font-size:.9em}vamtiger-json-ld-viewer [data-uppercase]{text-transform:uppercase}vamtiger-json-ld-viewer [slot=vamtiger-json-ld-viewer-cards],vamtiger-json-ld-viewer [slot=vamtiger-json-ld-viewer-tables]{width:70%;margin:0 auto}vamtiger-json-ld-viewer [slot=vamtiger-json-ld-viewer-tables]>*,vamtiger-json-ld-viewer [slot=vamtiger-json-ld-viewer-tables] [data-header]>*{margin-top:.5em;margin-bottom:.5em}vamtiger-json-ld-viewer [data-table]{display:table}vamtiger-json-ld-viewer [data-table] [data-row]{display:table-row}vamtiger-json-ld-viewer [data-table] [data-row] [data-cell]{display:table-cell}vamtiger-json-ld-viewer [data-table] [data-row] [data-cell] [data-cell-content]{font-size:.8em;padding-top:.5em;padding-bottom:.5em}vamtiger-json-ld-viewer [data-table] [data-row] [data-cell][data-row-heading] [data-cell-content]{font-weight:700}vamtiger-json-ld-viewer [data-table] [data-row] [data-row-copy]{padding-left:1em}\n/*# sourceMappingURL=document-index.ts.map */`;","export default `<slot data-cards></slot> <slot data-tables></slot> <article slot=\"vamtiger-json-ld-viewer-tables\"> <header data-header> <h1 data-heading data-uppercase></h1> <h2 data-subheading data-uppercase></h2> </header> <section data-table></section> </article>`;","import {\n    IGetTemplate,\n    GetTemplate,\n    StringConstant,\n    AttributesKey\n} from './types';\nimport html from './html';\nimport css from './css';\n\nconst { nothing } = StringConstant;\nconst template = document.createElement('template');\nconst stylesheet = `<style>${css}</style>`\nconst templateHtml = [\n    stylesheet,\n    html\n].join(nothing);\n\ntemplate.innerHTML = templateHtml;\n\nexport default <P extends IGetTemplate>(params: P) => {\n    const {\n        selector,\n        attributes = {},\n        properties = {}\n    } = params;\n    const attributesKeys = Object.keys(attributes) as AttributesKey[]\n    const templateElement = template.content.querySelector(selector);\n    const currentTemplate = templateElement && templateElement.cloneNode(true) as GetTemplate<P>;\n\n    if (currentTemplate) {\n        Object.assign(currentTemplate, properties);\n\n        attributesKeys.forEach(key => attributes[key] && currentTemplate.setAttribute(key, attributes[key] || ''));\n    }\n\n    return currentTemplate;\n};","import {\n    ObservedAttributes,\n    ObservedAttribute,\n    Fonts,\n    FontKey\n} from './types'\n\nexport const shadowRoot = {\n    mode: 'open'\n} as ShadowRootInit;\n\nexport const observedAttributes = Object.keys(ObservedAttributes) as ObservedAttribute[];\n\nexport const fontParams = (Object.keys(Fonts) as FontKey[])\n    .map(key => ({name: Fonts[key], href: Fonts[key]}));\n\nexport const dependencies = [\n    'https://vamtiger-project.github.io/vamtiger-response-svg/build/vamtiger-responsive-svg.js.json.js'\n];","import {\n    IGetTableArticle,\n    Selector,\n    StringConstant\n} from './types';\nimport getTemplate from './get-template';\n\nconst { requestIdleCallback, VamtigerBrowserMethod } = self;\nconst { getJsonLdArray } = VamtigerBrowserMethod;\nconst { nothing } = StringConstant\n\nexport default async function (params: IGetTableArticle) {return new Promise((resolve: (tableArticle: HTMLElement | null) => void, reject) => {\n    if (requestIdleCallback) {\n        requestIdleCallback(() => getTableArticle(params).then(resolve))\n    } else {\n        getTableArticle(params).then(resolve)\n    }\n})}\n\nasync function getTableArticle(params: IGetTableArticle) {\n    const { jsonLd } = params;\n    const jsonLdArray = await getJsonLdArray({ jsonLd }) || [];\n    const {\n        name: headingText,\n        description: subheadingText\n    } = jsonLd;\n    const tableArticle = getTemplate({\n        selector: Selector.tableArticle\n    });\n    const heading = tableArticle && tableArticle.querySelector<HTMLHeadingElement>(Selector.heading);\n    const subheading = tableArticle && tableArticle.querySelector<HTMLHeadingElement>(Selector.subheading);\n    const table = tableArticle && tableArticle.querySelector<HTMLElement>(Selector.table);\n    const tableHtml = table && jsonLdArray\n        .map(([header, copy]) => [\n            `<div data-row>`,\n                `<div data-cell data-row-heading>`,\n                    `<h3 data-cell-content data-uppercase>${header}</h3>`,\n                `</div>`,\n                `<div data-cell data-row-copy>`,\n                    `<p data-cell-content>${copy}</p>`,\n                `</div>`,\n            `</div>`\n        ].join(nothing))\n        .join(nothing);\n\n    if (heading && headingText) {\n        heading.innerHTML = headingText;\n    }\n\n    if (subheading && subheadingText) {\n        subheading.innerHTML = subheadingText;\n    }\n\n    if (table && tableHtml) {\n        table.innerHTML = tableHtml;\n    }\n\n    return tableArticle;\n}","import {\n    IViewJsonLd\n} from './types';\nimport getTableArticle from './get-table-article';\n\nconst { VamtigerBrowserMethod } = self;\nconst { getData } = VamtigerBrowserMethod;\n\nconst { requestIdleCallback } = self;\n\nexport default async function(params: IViewJsonLd) {return new Promise((resolve, reject) => {\n    if (requestIdleCallback) {\n        requestIdleCallback(() => viewJsonLd(params).then(resolve))\n    } else {\n        viewJsonLd(params).then(resolve)\n    }\n})}\n\nasync function viewJsonLd({ element, newValue: jsonLdUrl }: IViewJsonLd) {\n    const { jsonLd = [] } = await getData({jsonLd: jsonLdUrl});\n    const tableArticles = await Promise.all(jsonLd.map(currentJsonLd => getTableArticle({jsonLd: currentJsonLd})));\n\n    tableArticles.forEach(tableArticle => {\n        if (tableArticle) {\n            element.appendChild(tableArticle);\n        }\n    })\n}","import {\n    Selector,\n    ObservedAttribute,\n    ObservedAttributes,\n    SlotName,\n} from './types';\nimport css from './css/document-index';\nimport getTemplate from './get-template';\nimport {\n    shadowRoot as shadowRootConfig,\n    observedAttributes\n} from './config';\nimport viewJsonLd from './view-json-ld';\n\nconst { VamtigerBrowserMethod } = window;\nconst { loadScript } = VamtigerBrowserMethod;\nconst handleObservedAttribute = {\n    [ObservedAttributes['data-json-ld']]: viewJsonLd\n}\n\nexport const name = 'vamtiger-json-ld-viewer';\n\ncss && loadScript({ name, css })\n    .catch(console.error);\n\nexport default class VamtigerJsonLdViewer extends HTMLElement {\n    constructor() {\n        super();\n\n        const shadowRoot = this.attachShadow(shadowRootConfig);\n        const stylesheet = getTemplate({\n            selector: Selector.style\n        });\n        const cards = getTemplate({\n            selector: Selector.cards,\n            attributes: {\n                name: SlotName.cards\n            }\n        });\n        const tables = getTemplate({\n            selector: Selector.tables,\n            attributes: {\n                name: SlotName.tables\n            }\n        });\n        const elements = [\n            stylesheet,\n            cards,\n            tables\n        ];\n\n        elements.forEach(element => element && shadowRoot.appendChild(element));\n    }\n\n    static get observedAttributes() {\n        return observedAttributes;\n    }\n\n    async connectedCallback() {\n\n    }\n\n    attributeChangedCallback(name: ObservedAttribute, oldValue: string, newValue: string) {\n        handleObservedAttribute[name]({\n            element: this,\n            name,\n            oldValue,\n            newValue\n        });\n    }\n}","import constructor, { name } from './element';\nimport {\n    dependencies,\n    fontParams\n} from './config'\n\nconst { VamtigerBrowserMethod } = window;\nconst { defineCustomElement, loadScript } = VamtigerBrowserMethod;\nconst params = {\n    name,\n    constructor\n};\n\nasync function load() {\n    await Promise.all(fontParams.map(params => loadScript(params).catch(console.error)));\n\n    await Promise.all(dependencies.map(src => loadScript({ src })));\n\n    defineCustomElement(params);\n}\n\nload().catch(console.warn);"],"names":["StringConstant","Selector","ObservedAttributes","SlotName","Fonts","nothing","template","document","createElement","templateHtml","html","join","innerHTML","params","selector","attributes","properties","attributesKeys","Object","keys","templateElement","content","querySelector","currentTemplate","cloneNode","assign","forEach","key","setAttribute","shadowRoot","mode","observedAttributes","fontParams","map","name","href","dependencies","requestIdleCallback","VamtigerBrowserMethod","self","getJsonLdArray","async","getTableArticle","jsonLd","jsonLdArray","headingText","description","subheadingText","tableArticle","getTemplate","heading","subheading","table","tableHtml","header","copy","getData","viewJsonLd","element","newValue","jsonLdUrl","Promise","all","currentJsonLd","resolve","reject","then","appendChild","window","loadScript","handleObservedAttribute","[object Object]","css","catch","console","error","defineCustomElement","HTMLElement","super","this","attachShadow","shadowRootConfig","style","cards","tables","oldValue","src","load","warn"],"mappings":"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"}